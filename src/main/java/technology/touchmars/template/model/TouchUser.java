/**
 * This file was generated by the Jeddict
 */
package technology.touchmars.template.model;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import org.hibernate.annotations.GenericGenerator;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import technology.touchmars.template.service.GenerateUniqueKey;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Data
@EqualsAndHashCode(callSuper=false, of={"id", "hashId", "account"})
@ToString(exclude= {"userConnectionList", "userConnectionWechatList"})
@Entity
@Table(name = "Touch_User")
public class TouchUser extends AuditableBaseEntity  {

    @Column(name = "id", nullable = false)
    @Id 
    @GeneratedValue(strategy=GenerationType.AUTO, generator="native")
	@GenericGenerator(name = "native", strategy = "native")
	private Long id;

    @Column(name = "hash_id")
    @Basic
    private String hashId;

    @OneToOne(cascade=CascadeType.ALL, fetch = FetchType.EAGER, targetEntity = Account.class, mappedBy = "touchUser")
    private Account account;
    
    @OneToMany(cascade=CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "touchUser")
    private List<UserAuthority> userAuthorityCollection = new ArrayList<UserAuthority>();

    @OneToMany(cascade=CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "touchUser")
    private Set<UserConnection> userConnectionList = new HashSet<UserConnection>();

    @OneToMany(cascade=CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "touchUser")
    private Set<UserConnectionWechat> userConnectionWechatList = new HashSet<UserConnectionWechat>();

//
//    @OneToMany(fetch = FetchType.LAZY, targetEntity = CreditCard.class, mappedBy = "owner")
//    private List<CreditCard> creditCardCollection;
//
//    @OneToMany(fetch = FetchType.LAZY, targetEntity = UserDevice.class, mappedBy = "touchUser")
//    private List<UserDevice> userDeviceCollection;
//
//    @OneToMany(fetch = FetchType.LAZY, targetEntity = UserPreference.class, mappedBy = "touchUser")
//    private List<UserPreference> userPreferenceCollection;
//
//    @OneToMany(fetch = FetchType.LAZY, targetEntity = UserCorporate.class, mappedBy = "touchUser")
//    private List<UserCorporate> userCorporateCollection;
//
//    @OneToMany(fetch = FetchType.LAZY, targetEntity = Corporate.class, mappedBy = "owner")
//    private List<Corporate> coporateCollection;
//
//    
//    @OneToMany(fetch = FetchType.LAZY, targetEntity = Contact.class, mappedBy = "touchUser")
//    private List<Contact> contactCollection;

	@Transient
	public void assembleUser(String username, String password, String firstName, String lastName){
		Account a = new Account(username, password, firstName, lastName);
		a.setTouchUser(this);
		this.setAccount(a);
		this.setHashId(GenerateUniqueKey.getInstance().generateUniqueHashId());
	}
	
	@Transient
	public void addAuthority(Authority authority) {	
		UserAuthority ua = new UserAuthority();
		ua.setTouchUser(this);
		ua.setAuthority(authority);
		this.userAuthorityCollection.add(ua);
	}

	@Transient
	public void addConnection(UserConnection userConnection) {
		if(userConnection!=null) {
			userConnection.setTouchUser(this);			
			this.userConnectionList.add(userConnection);
		}
	}
	@Transient
	public void addWechatConnection(UserConnectionWechat ucWechat) {
		if(ucWechat!=null) {
			ucWechat.setTouchUser(this);			
			this.userConnectionWechatList.add(ucWechat);
		}
	}	
	@Transient 
	public void createUserWithWechatConnection(String appId, String openId, String unionId, String sessionKey, Long expires) {
		UserConnectionWechat ucWechat = new UserConnectionWechat();
		ucWechat.setAppId(appId);
		ucWechat.setOpenId(openId);
		ucWechat.setUnionId(unionId);
		ucWechat.setSessionKey(sessionKey);
		ucWechat.setExpires(expires);
		this.setHashId(GenerateUniqueKey.getInstance().generateUniqueHashId());
		this.addWechatConnection(ucWechat);
	}
	@Transient
	public List<Authority> getAuthorityList(){
		return 
			this.userAuthorityCollection.stream().map(ua->ua.getAuthority())
				.collect(Collectors.toList());
	}
	@Transient
	public List<SimpleGrantedAuthority> getSimpleGrantedAuthorityList(){
		return 
			this.getUserAuthorityCollection()
				.stream()
				.map(ua->new SimpleGrantedAuthority(ua.getAuthority().getName()))
				.collect(Collectors.toList());
	}
	@Transient
	public boolean hasRole(String role) {
		return this.userAuthorityCollection.stream().anyMatch(a -> a.getAuthority().getName().equalsIgnoreCase(role) );
	}
	@Transient
	public boolean hasRole(Integer roleId) {
		return this.userAuthorityCollection.stream().anyMatch(a -> a.getAuthority().getId().equals(roleId) );
	}
	

	@Transient
//	@Override
	public String getName() {
		return this.hashId;
	}
	
}